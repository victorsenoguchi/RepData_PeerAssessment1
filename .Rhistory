geom_histogram(binwidth = 20)
shinyApp(
ui <- fluidPage(
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput("selected_var",
"Variable:",
choices = list("area", "price"),
selected = "area"),
numericInput("n_samp",
"Sample size:",
min = 1,
max = nrow(ames),
value = 30),
numericInput("n_sim",
"Number of samples:",
min = 1,
max = 30000,
value = 15000)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("sampling_plot"),
verbatimTextOutput("sampling_mean"),
verbatimTextOutput("sampling_se")
)
)
),
# Define server logic required to draw a histogram
server <- function(input, output) {
# create sampling distribution
sampling_dist <- reactive({
ames[[input$selected_var]] %>%
sample(size = input$n_samp * input$n_sim, replace = TRUE) %>%
matrix(ncol = input$n_samp) %>%
rowMeans() %>%
data.frame(x_bar = .)
#ames %>%
#  rep_sample_n(size = input$n_samp, reps = input$n_sim, replace = TRUE) %>%
#  summarise_(x_bar = mean(input$selected_var))
})
# plot sampling distribution
output$sampling_plot <- renderPlot({
x_min <- quantile(ames[[input$selected_var]], 0.1)
x_max <- quantile(ames[[input$selected_var]], 0.9)
ggplot(sampling_dist(), aes(x = x_bar)) +
geom_histogram() +
xlim(x_min, x_max) +
ylim(0, input$n_sim * 0.35) +
ggtitle(paste0("Sampling distribution of mean ",
input$selected_var, " (n = ", input$n_samp, ")")) +
xlab(paste("mean", input$selected_var)) +
theme(plot.title = element_text(face = "bold", size = 16))
})
# mean of sampling distribution
output$sampling_mean <- renderText({
paste0("mean of sampling distribution = ", round(mean(sampling_dist()$x_bar), 2))
})
# mean of sampling distribution
output$sampling_se <- renderText({
paste0("SE of sampling distribution = ", round(sd(sampling_dist()$x_bar), 2))
})
},
options = list(height = 500)
)
library(statsr)
library(dplyr)
library(shiny)
library(ggplot2)
data(ames)
ggplot(data = ames, aes(x = area)) +
geom_histogram(binwidth = 200)
ames %>%
summarise(mu = mean(area), pop_med = median(area),
sigma = sd(area), pop_iqr = IQR(area),
pop_min = min(area), pop_max = max(area),
pop_q1 = quantile(area, 0.25),  # first quartile, 25th percentile
pop_q3 = quantile(area, 0.75))  # third quartile, 75th percentile
sampl <- ames %>%
sample_n(size = 50)
ggplot(data = sampl, aes(x = area)) +
geom_histogram(binwidth = 100)
sampl %>%
summarise(mu_sample = mean(area), sample_med = median(area),
sigma_sample = sd(area), sample_iqr = IQR(area),
sample_min = min(area), sample_max = max(area),
sample_q1 = quantile(area, 0.25),  # first quartile, 25th percentile
sample_q3 = quantile(area, 0.75))  # third quartile, 75th percentile
sampl %>%
summarise(x_bar = mean(area))
ames %>%
sample_n(size = 50) %>%
summarise(x_bar = mean(area))
sample_means50 <- ames %>%
rep_sample_n(size = 50, reps = 15000, replace = TRUE) %>%
summarise(x_bar = mean(area))
ggplot(data = sample_means50, aes(x = x_bar)) +
geom_histogram(binwidth = 20)
# Number of elements.
nrow(sample_means50)
# Avarage mean.
mean(sample_means50$x_bar)
# Stardard error.
sd(sample_means50$x_bar)
# type your code for the Exercise here, and Run Document
sample_means_small <- vector(mode="numeric", length=0)
for (i in 1:25){
sample_mean <- ames %>%
sample_n(size = 10) %>%
summarise(x_bar = mean(area))
sample_means_small <- rbind(sample_means_small, sample_mean)
}
# The output.
head(sample_means_small)
# The are 25 observations in this object.
nrow(sample_means_small)
sample_means10 <- ames %>%
rep_sample_n(size = 10, reps = 25, replace = TRUE) %>%
summarise(x_bar = mean(area))
nrow(sample_means10)
ggplot(data = sample_means50, aes(x = x_bar)) +
geom_histogram(binwidth = 20)
shinyApp(
ui <- fluidPage(
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput("selected_var",
"Variable:",
choices = list("area", "price"),
selected = "area"),
numericInput("n_samp",
"Sample size:",
min = 1,
max = nrow(ames),
value = 30),
numericInput("n_sim",
"Number of samples:",
min = 1,
max = 30000,
value = 15000)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("sampling_plot"),
verbatimTextOutput("sampling_mean"),
verbatimTextOutput("sampling_se")
)
)
),
# Define server logic required to draw a histogram
server <- function(input, output) {
# create sampling distribution
sampling_dist <- reactive({
ames[[input$selected_var]] %>%
sample(size = input$n_samp * input$n_sim, replace = TRUE) %>%
matrix(ncol = input$n_samp) %>%
rowMeans() %>%
data.frame(x_bar = .)
#ames %>%
#  rep_sample_n(size = input$n_samp, reps = input$n_sim, replace = TRUE) %>%
#  summarise_(x_bar = mean(input$selected_var))
})
# plot sampling distribution
output$sampling_plot <- renderPlot({
x_min <- quantile(ames[[input$selected_var]], 0.1)
x_max <- quantile(ames[[input$selected_var]], 0.9)
ggplot(sampling_dist(), aes(x = x_bar)) +
geom_histogram() +
xlim(x_min, x_max) +
ylim(0, input$n_sim * 0.35) +
ggtitle(paste0("Sampling distribution of mean ",
input$selected_var, " (n = ", input$n_samp, ")")) +
xlab(paste("mean", input$selected_var)) +
theme(plot.title = element_text(face = "bold", size = 16))
})
# mean of sampling distribution
output$sampling_mean <- renderText({
paste0("mean of sampling distribution = ", round(mean(sampling_dist()$x_bar), 2))
})
# mean of sampling distribution
output$sampling_se <- renderText({
paste0("SE of sampling distribution = ", round(sd(sampling_dist()$x_bar), 2))
})
},
options = list(height = 500)
)
getwd()
setwd("R/Course Project 1")
getwd()
dir()
df <- read.csv("activity.csv")
head(df)
names(df)
tail(df)
df$steps
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
data <- read.csv("activity.csv")
data
data <- read.csv("activity.csv")
names(data)
complete_data <- complete.cases(data)
complete_data
complete_data <- data[complete.cases(data)]
complete_data <- data[,complete.cases(data)]
complete_data <- data[complete.cases(data)]
complete_data <- data[complete.cases(data),]
complete_data
complete_data <- data[complete.cases(data),]
datac <- na.omit(data)
datac
datac == complete_data
## Loading and preprocessing the data
data <- read.csv("activity.csv")
names(data)
complete_data <- data[complete.cases(data),]
## What is mean total number of steps taken per day?
mean(complete_data$steps)
data <- read.csv("activity.csv")
names(data)
complete_data <- data[complete.cases(data),]
## What is mean total number o
## Loading and preprocessing the data
data <- read.csv("activity.csv")
names(data)
complete_data <- data[complete.cases(data),]
## What is mean total number of steps taken per day?
summary(complete_data$steps)
ggplot2(data = complete_data, aes(x=steps)) + geom_histogram()
## Loading and preprocessing the data
data <- read.csv("activity.csv")
names(data)
complete_data <- data[complete.cases(data),]
library(ggplot)
## What is mean total number of steps taken per day?
summary(complete_data$steps)
## What is the average daily activity pattern?
ggplot2(data = complete_data, aes(x=steps)) + geom_histogram()
data <- read.csv("activity.csv")
names(data)
complete_data <- data[complete.cases(data),]
library(ggplot2)
## What is mean total number of steps taken per day?
summary(complete_data$steps)
## What is the average daily activity pattern?
ggplot2(data = complete_data, aes(x=steps)) + geom_histogram()
ggplot2(complete_data, aes(x=steps)) + geom_histogram()
data <- read.csv("activity.csv")
names(data)
complete_data <- data[complete.cases(data),]
library(ggplot2)
## What is mean total number of steps taken per day?
summary(complete_data$steps)
## What is the average daily activity pattern?
ggplot(complete_data, aes(x=steps)) + geom_histogram()
library(data.table)
dat_tbl = data.table(dat)
dat_tbl_summary = dat_tbl[, list(total_steps = sum(steps, na.rm = T)),
by = date]
library(data.table)
dat_tbl = data.table(data)
dat_tbl_summary = dat_tbl[, list(total_steps = sum(steps, na.rm = T)),
by = date]
dat_tbl = data.table(data)
dat_tbl_summary = dat_tbl[, list(total_
dat_tbl = data.table(data)
dat_tbl_summary = dat_tbl[, list(total_steps = sum(steps, na.rm = T)),
by = date]
data <- read.csv("activity.csv")
names(data)
complete_data <- data[complete.cases(data),]
library(ggplot2)
library(data.table)
## What is mean total number of steps taken per day?
dat_tbl = data.table(data)
dat_tbl_summary = dat_tbl[,list(total_steps = sum(steps, na.rm = T)),
by = date]
data <- read.csv("activity.csv")
names(data)
complete_data <- data[complete.cases(data),]
library(ggplot2)
library(data.table)
## What is mean total number of steps taken per day?
dat_tbl <- data.table(data)
dat_tbl_summary <- dat_tbl[,list(total_steps = sum(steps, na.rm = T)),
by = date]
data <- read.csv("activity.csv")
complete_data <- data[complete.cases(data),]
data_per_day <- complete_data %>% group_by(steps)
data_per_day
library(dplyr)
data <- read.csv("activity.csv")
complete_data <- data[complete.cases(data),]
data_per_day <- complete_data %>% group_by(steps)
data_per_day
library(dplyr)
data <- read.csv("activity.csv")
complete_data <- data[complete.cases(data),]
data_per_day <- complete_data %>% group_by(steps)
head(data_per_day)
library(dplyr)
data <- read.csv("activity.csv")
complete_data <- data[complete.cases(data),]
data_per_day <- complete_data %>% group_by(date)
head(data_per_day)
library(table.data)
data <- read.csv("activity.csv")
complete_data <- data[complete.cases(data),]
data_per_day <- data.table[, sum(steps), by = date]
data_per_day
library(data.table)
data <- read.csv("activity.csv")
complete_data <- data[complete.cases(data),]
data_per_day <- data.table[, sum(steps), by = date]
data_per_day
library(data.table)
data <- read.csv("activity.csv")
complete_data <- data[complete.cases(data),]
data_per_day <- data.table(complete_data)
data_per_day <- data_per_day[, sum(steps), by = date]
library(data.table)
data <- read.csv("activity.csv")
complete_data <- data[complete.cases(data),]
data_per_day <- data.table(complete_data)
data_per_day <- data_per_day[, sum(steps), by = date]
data_per_day
library(data.table)
data <- read.csv("activity.csv")
complete_data <- data[complete.cases(data),]
data_per_day <- data.table(complete_data)
data_per_day <- data_per_day[, sum(steps) = steps_per_day, by = date]
data_per_day
library(dplyr)
data <- read.csv("activity.csv")
complete_data <- data[complete.cases(data),]
library(dplyr)
data_per_day <- complete_data %>% group_bt(date) %>% summarise(steps = sum(steps))
data_per_day
library(dplyr)
data <- read.csv("activity.csv")
complete_data <- data[complete.cases(data),]
library(dplyr)
data_per_day <- complete_data %>% group_bt(date)
data_per_day
library(dplyr)
data <- read.csv("activity.csv")
complete_data <- data[complete.cases(data),]
library(dplyr)
data_per_day <- complete_data %>% group_by(date)
data_per_day
library(dplyr)
data <- read.csv("activity.csv")
complete_data <- data[complete.cases(data),]
library(dplyr)
data_per_day <- complete_data %>% group_by(date) %>% summarise(steps = sum(steps))
data_per_day
library(dplyr)
data <- read.csv("activity.csv")
complete_data <- data[complete.cases(data),]
library(dplyr)
data_per_day <- complete_data %>% group_by(date) %>% summarise(steps = sum(steps))
## What is mean total number of steps taken per day?
mean(data_per_day$steps)
library(ggplot2)
ggplot(data_per_day, aes(x=steps)) + geom_histogram()
summary(data_per_day$steps)
library(dplyr)
data <- read.csv("activity.csv")
complete_data <- data[complete.cases(data),]
library(dplyr)
data_per_day <- complete_data %>% group_by(date) %>% summarise(steps = sum(steps))
## What is mean total number of steps taken per day?
summary(data_per_day$steps)
## What is the average daily activity pattern?
library(ggplot2)
ggplot(data_per_day, aes(x=steps, y = number of days)) + geom_histogram()
library(dplyr)
data <- read.csv("activity.csv")
complete_data <- data[complete.cases(data),]
library(dplyr)
data_per_day <- complete_data %>% group_by(date) %>% summarise(steps = sum(steps))
## What is mean total number of steps taken per day?
summary(data_per_day$steps)
## What is the average daily activity pattern?
library(ggplot2)
ggplot(data_per_day, aes(steps)) + geom_histogram()
library(dplyr)
data <- read.csv("activity.csv")
complete_data <- data[complete.cases(data),]
library(dplyr)
data_per_day <- complete_data %>% group_by(date) %>% summarise(steps = sum(steps))
## What is mean total number of steps taken per day?
summary(data_per_day$steps)
## What is the average daily activity pattern?
library(ggplot2)
ggplot(data_per_day, aes(data_per_day$steps)) + geom_histogram()
library(ggplot2)
ggplot(data_per_day, aes(steps)) + geom_histogram()
library(dplyr)
data <- read.csv("activity.csv")
complete_data <- data[complete.cases(data),]
library(dplyr)
data_per_day <- complete_data %>% group_by(date) %>% summarise(steps = sum(steps))
## What is mean total number of steps taken per day?
summary(data_per_day$steps)
## What is the average daily activity pattern?
library(ggplot2)
qplot(data_per_day$steps,
geom="histogram",
binwidth = 5000,
main = "Steps per Day",
xlab = "Total Steps per Day",
fill=I("blue")
stepsPerDay <- aggregate(steps ~ date, measurements, sum)
hist(stepsPerDay$steps, main = "Steps per day", xlab = "Steps", col = "blue", breaks = 8)
stepsPerDay <- aggregate(steps ~ date, complete_data, sum)
hist(stepsPerDay$steps, main = "Steps per day", xlab = "Steps", col = "blue", breaks = 8)
mean(stepsPerDay$steps
mean(stepsPerDay$steps)
mean(stepsPerDay)
class(stepsPerDay)
names(stepsPerDay)
stepsPerDay$steps
mean(stepsPerDay$steps)
summary(stepsPerDay$steps)
---
title: "Reproducible Research: Peer Assessment 1"
author: "Victor Borges"
date: "25/01/2021"
output:
html_document:
keep_md: true
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## Loading and preprocessing the data
library(dplyr)
data <- read.csv("activity.csv")
complete_data <- data[complete.cases(data),]
stepsPerDay <- aggregate(steps ~ date, complete_data, sum)
## What is mean total number of steps taken per day?
stepsPerDay <- aggregate(steps ~ date, complete_data, sum)
hist(stepsPerDay$steps,
main = "Steps per day",
xlab = "Steps",
col = "blue",
breaks = 8)
meanStepsPerDay <- mean(stepsPerDay$steps)
medianStepsPerDay <- median(stepsPerDay$steps)
## What is the average daily activity pattern?
stepsInterval <- aggregate(steps ~ interval, complete_data, mean)
plot(stepsInterval$interval,
stepsInterval$steps,
type="l", xlab = "5 min - interval",
ylab = "Average steps",
main = "Average Daily Activity Pattern",
col = "green")
stepsInterval$interval[which.max(stepsInterval$steps)]
## Imputing missing values
nrow(data[is.na(data$steps),])
stepsPerDay <- aggregate(steps ~ date, complete_data, sum)
hist(stepsPerDay$steps,
main = "Steps per day",
xlab = "Steps",
col = "blue",
breaks = 8)
meanStepsPerDay <- mean(stepsPerDay$steps)
medianStepsPerDay <- median(stepsPerDay$steps)
library(dplyr)
data <- read.csv("activity.csv")
complete_data <- data[complete.cases(data),]
stepsPerDay <- aggregate(steps ~ date, complete_data, sum)
data <- read.csv("activity.csv")
complete_data <- data[complete.cases(data),]
stepsPerDay <- aggregate(steps ~ date, complete_data, sum)
## What is mean total number of steps taken per day?
stepsPerDay <- aggregate(steps ~ date, complete_data, sum)
hist(stepsPerDay$steps,
main = "Steps per day",
xlab = "Steps",
col = "blue",
breaks = 8)
meanStepsPerDay <- mean(stepsPerDay$steps)
medianStepsPerDay <- median(stepsPerDay$steps)
stepsInterval <- aggregate(steps ~ interval, complete_data, mean)
plot(stepsInterval$interval,
stepsInterval$steps,
type="l", xlab = "5 min - interval",
ylab = "Average steps",
main = "Average Daily Activity Pattern",
col = "green")
stepsInterval$interval[which.max(stepsInterval$steps)]
stepsInterval <- aggregate(steps ~ interval, complete_data, mean)
plot(stepsInterval$interval,
stepsInterval$steps,
type="l", xlab = "5 min - interval",
ylab = "Average steps",
main = "Average Daily Activity Pattern",
col = "blue")
stepsInterval$interval[which.max(stepsInterval$steps)]
stepsInterval <- aggregate(steps ~ interval, complete_data, mean)
plot(stepsInterval$interval,
stepsInterval$steps,
type="l", xlab = "5 min - interval",
ylab = "Average steps",
main = "Average Daily Activity Pattern",
col = "blue")
nrow(data[is.na(data$steps),])
